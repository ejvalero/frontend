CURSO RESPONSIVE DESIGN

CSS: alineado de elementos en forma horizontal con flexbox

    La propiedad de css que nos permite definir la forma en que se alinearán o distribuirán los hijos de un elemento al que se le ha asignado un display flex es: justify-content. Y puede tomar entre otros valores, los siguientes:

    flex-start: para alinear todos los elementos hacia el inicio del espacio disponible.
    flex-end: para alinear todos los elementos hacia el final, a la derecha.
    center: para alinear todos los elementos al centro del espacio disponible.
    space-between: para distribuir los elementos con un espacio proporcional e igual entre ellos.
    space-evenly: para distribuir los elementos con un espacio proporcional e igual entre ellos (incluyendo el primer y último elementos con respecto a los extremos del espacio disponible).
    space-around: similar a space-evenly pero tanto en el primero como en el último elemento, el espacio hacia los extremos es la mitad del espacio usado entre los elementos.


CSS: alineado de elementos en forma vertical con flexbox

    Similar a como sucede con justify-content, es posible alinear y distribuir los elementos internos en el espacio vertical disponible usando la propiedad align-items, que puede tomar también los valores de: flex-start, flex-end y center.

    Algo que es muy importante y se debe tener en cuenta a la hora de usar align-items y justify-content es que dependiendo de la propiedad flex-direction que se haya definido, el efecto de ambos se invierte, no en cuanto a sus elementos internos, sino en cuanto a si se debe usar uno u otro de manera vertical u horizontal.

    IMPORTANTE: Cuando la propiedad flex-direction se ha definido como column, la propiedad justify-content ya no va a aplicar sobre la alineación horizontal, sino sobre la vertical. Y align-items ya no aplicaría sobre la alineación vertical sino la horizontal. Se intercambian sus efectos.

    Para centrar completamente los elementos internos de manera vertical y horizontal en su elemento padre, debemos usar el valor center en ambas propiedades.



Estilos de la sección principal y de footer
    En esta clase aplicaremos a nuestro proyecto los estilos necesarios para que la sección principal o hero de nuestro portafolio se vea correctamente. También completaremos la información de nuestro footer y le aplicaremos los respectivos estilos.

    En esta clase vemos que además de las propiedades relacionadas con display:flex, en lo que se refiere a la alineación de elementos internos, existen también propiedades equivalentes que nos permite alinear textos dentro de un contenedor, estas propiedades son: text-align y vertical-align.


Estilos sección de eventos
    En esta clase definimos los estilos de la sección de eventos de nuestro portafolio. Vemos también algunas propiedades nuevas como overflow, object-fit, position y z-index.



Remote Debugging en Android y puliendo últimos detalles
    Así como aprendiste a configurar el remote debugging para iOS, en esta clase aprenderás a configurarlo para dispositivos Android. Para aprender a hacerlo, debes tener conectado tu teléfono a tu computador vía usb y activar el menú de desarrollador -el cual se encuentra en la configuración-; al activarlo debe aparecer un menú adicional desde el cual podrás utilizar el inspector de elementos en tu computador, desde el explorador que tengas (que para esta ocasión será Google Chrome). Desde este lugar podrás modificar los diversos elementos de tu proyecto, aplicando las herramientas y conocimientos que ya dominas hasta el momento. Por último, ¡pulirás los detalles finales de tu proyecto!
    Debugging con firefox: https://developer.mozilla.org/en-US/docs/Tools/about:debugging#Connecting_to_a_remote_device
    Chrome: https://developers.google.com/web/tools/chrome-devtools/javascript



CURSO DE ANIMACIONES PARA LA WEB

Introducción a las animaciones y micro interacciones en la web
    ¿Qué son la animaciones?

    La transición que ocurre entre un punto A y un punto B.
    Son parte natural de las interfaces web.
    Son una forma natural de enseñanza para el usuario.
    Ayudan a conectar una interfaz que solo está programada en algo que realmente está vivo.
    La acción de un usuario interactuando con la interfaz y que ésta le de feedback de lo que está ocurriendo.
    Recuerda:
    Las animaciones en una interfaz web son necesarias, ya que ninguna acción que ocurre en ésta se da de forma instantánea.


Transformaciones de traslación y perspectiva
    Para recordar:

    Translate nos sirve para poder mover un elemento arriba, abajo, derecha e izquierda.
    Utilizamos la propiedad perspective para poder darle profundidad a un elemento y obtener un efecto 3D.


Transformaciones de escala
    Transform-scale nos permite modificar el tamaño de nuestros elementos a nuestro gusto.

    La medición del tamaño de un elemento con scale, es la siguiente:

    0 = 0% del tamaño.
    1 = 100% del tamaño.


Transformaciones de sesgados o por inclinación
    Sesgar es esa inclinación que puede sufrir un elemento gracias a una transformación en CSS.

    Se puede sesgar un elemento tanto de un solo eje, como de ambos:

        transform: skew (x);
        transform: skew (y);
        transform: skew (x, y);


Punto de transformación
    El punto de transformación de un elemento está clavado en alguna parte de la interfaz, y por defecto se encuentra en el centro.

    Sin embargo, podemos jugar con la posición de este punto según el tipo de animación que queramos crear.


Múltiples animaciones
    En este vídeo vamos a aprender a hacer múltiples animaciones y cómo trabajar en cada una para realizar movimientos más complejos en los elementos.

    Para nombrar más de una animación podemos nombrarlas en la misma línea de código:

        animation-name: nombre1, nombre2;


Detectar eventos de animaciones CSS desde JS
    En este vídeo vamos a ver cómo detectar el fin (addEventListener('animationend')) o inicio (addEventListener('animationstart')) de una animación llamando al elemento desde JavaScript.

    También veremos cómo cambiar o encadenar animaciones de forma más programada escuchando los eventos del elemento animado a través también de JavaScript.


element.animate
    Podemos crear animaciones desde JavaScript con element.animate, que es parte de la especificación del API de animaciones de JavaScript. 
        (https://static.platzi.com/media/files/index_d8a2a9ac-e017-4e00-b4f4-f7095138e457.html)
        (https://static.platzi.com/media/public/uploads/index_8d668339-8539-4200-8cc0-9dc52dcdef40.html)


CURSO JQUERY A JS


Selectores
    Un selector nos sirve para poder manipular un objeto del DOM, puedes buscar dicho objeto ya sea por su id, clase, atributo, etc.

    Para PlatziVideo necesitamos un selector de un contenedor para ponerle dentro la lista de películas.

    En jQuery hacemos un selector de la siguiente forma:

    const $home = $(‘ .home ’);
    Por convención una variable que este represente un objeto del DOM lleva el signo $, esto es para tener claro que estamos manipulando un objeto del DOM y no algún tipo de información o dato.

    Dentro de JavaScript existen distintas funciones para hacer selectores, entre ellas se encuentra:

    • getElementById: recibe como parámetro el id del objeto del DOM que estás buscando. Te regresa un solo objeto.
    • getElementsByTagName: recibe como parámetro el tag que estas buscando y te regresa una colección html de los elementos que tengan ese tag.
    • getElementsByClassName: recibe como parámetro la clase y te regresa una colección html de los elementos que tengan esa clase.
    • querySelector: va a buscar el primer elemento que coincida con el selector que le pases como parámetro.
    • querySelectorAll: va a buscar todos los elementos que coincidan con el selector que le pases como parámetro.
